# üöÄ Build the FHE-Powered Secret Feedback Wall DApp with Zama fhEVM in Replit

**You are an expert full-stack Web3 developer with 10+ years building top DApps (Uniswap, Aave clones). Build this COMPLETE, PRODUCTION-READY DApp in ONE GO using Next.js + fhEVM React Template as base. Use Replit's Next.js template to start.**

## üéØ DApp Overview: Anonymous Encrypted Feedback Wall
- **Users**: Connect wallet ‚Üí Write anonymous message (max 256 chars) ‚Üí **CLIENT-SIDE ENCRYPT** with Zama FHE ‚Üí Submit to contract (gas-optimized).
- **Admin ONLY**: Connect as admin ‚Üí View **ALL DECRYPTED** messages in real-time (client-side decrypt).
- **Privacy**: Messages **fully encrypted on-chain**. Only admin decrypts using deterministic pubkey `(contractAddr, adminAddr)`. 100% anonymous.
- **Network**: Sepolia Testnet (easy deploy). Local dev fallback.
- **UI**: Beautiful, responsive: Dark/Light mode, Tailwind, animations. User form + Admin dashboard toggle.

## üõ†Ô∏è Tech Stack (Industry Standard)
- **Frontend**: Next.js 15 + React 18 + Tailwind CSS + RainbowKit (wallet connect) + Wagmi/Viem (txs).
- **FHE**: **Zama fhEVM** - Client encrypt/decrypt via `@encifher/fhevm`.
- **Contracts**: Hardhat + Solidity 0.8.24 + `@encifher/fhevm`.
- **Deploy**: 1-click to Sepolia (Infura/Alchemy).
- **Libs**:
  | Lib | Version | Purpose |
  |-----|---------|---------|
  | `@encifher/fhevm` | latest | FHE contracts & JS SDK |
  | `fhevm` | latest | JS encrypt/decrypt |
  | `wagmi` | ^2.0 | Wallet/Tx |
  | `viem` | ^2.0 | Chains |
  | `@rainbow-me/rainbowkit` | latest | UI Wallet |
  | `hardhat-fhevm` | latest | Deploy |

## üìö ALL DEVELOPER DOCS & SOURCES (Copy-Paste Ready)
1. **Zama fhEVM Docs**: https://docs.zama.ai/protocol/ (Quickstart: https://docs.zama.ai/protocol/solidity-guides/getting-started/quick-start-tutorial)
2. **React Template (CLONE THIS)**: https://github.com/zama-ai/fhevm-react-template (Has wallet + encrypt ready!)
3. **Hardhat Template**: https://github.com/zama-ai/fhevm-hardhat-template
4. **JS SDK Encrypt/Decrypt**: https://docs.zama.ai/protocol/solidity-guides/smart-contract/inputs
5. **npm fhevm**: `npm i fhevm` (API: `fhevm.createEncryptedInput(contractAddr, ADMIN_ADDR).add8(byte).encrypt()`)
6. **Sepolia Faucet**: https://sepoliafaucet.com
7. **Infura/Alchemy**: Free API key for deploy.

## üîß STEP-BY-STEP BUILD INSTRUCTIONS (Execute in Order in Replit Shell)

### 1. **Init from Next.js Template in Replit**
- Replit starts with Next.js ‚Äî run: `npm install`

### 2. **Contracts: `contracts/SecretFeedbackWall.sol`**
```solidity
// SPDX-License-Identifier: BSD-3-Clause-Clear
pragma solidity ^0.8.24;

import {SepoliaConfig} from "@encifher/fhevm/config/ZamaConfig.sol";

contract SecretFeedbackWall is SepoliaConfig {
    address public immutable ADMIN;
    bytes32[][] public messages;
    uint256 public messageCount;

    event NewMessage(uint256 indexed id);

    constructor(address _admin) {
        ADMIN = _admin;
    }

    /// @notice Submit encrypted feedback (handles from client encrypt)
    function submitFeedback(bytes32[] calldata handles) external {
        require(handles.length <= 256 && handles.length > 0, "Invalid length");
        uint256 id = messageCount++;
        bytes32[] storage msgStorage = messages.push();
        for (uint256 i = 0; i < handles.length; ) {
            msgStorage[i] = handles[i];
            unchecked { ++i; }
        }
        emit NewMessage(id);
    }

    /// @notice Get all encrypted messages (admin decrypts off-chain)
    function getMessages() external view returns (bytes32[][] memory) {
        return messages;
    }
}